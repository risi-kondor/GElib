***********
SO3vecArr
***********


An ``SO3vecArr`` is a multidimensional array of ``SO3vec`` objects. 
On the backend, the ``SO3vecArr`` is stored as a list of ``GElib::SO3partArray`` 
objects, however logically it is accessible as a single array of ``SO3vec`` objects. 

.. code-block:: python

 >>> A=gelib.SO3vecArr.gaussian([2,2],[2,2])
 >>> print(A)
 Cell (0,0)
 [ (-1.23974,-0.653697) (-0.407472,-0.645572) ]


 Cell (0,1)
 [ (-1.50279,0.0436305) (0.570759,-1.11315) ]


 Cell (1,0)
 [ (-1.13769,0.682072) (-1.22027,-0.711608) ]


 Cell (1,1)
 [ (-1.20183,0.967431) (-0.399454,-0.438438) ]



 Cell (0,0)
 [ (-0.056168,0.275777) (0.806889,0.904426) ]
 [ (-0.219183,-0.0361725) (0.89997,-0.709382) ]
 [ (0.842292,-0.53226) (-1.56131,-0.502227) ]


 Cell (0,1)
 [ (0.208035,0.584081) (-1.56208,0.93446) ]
 [ (-0.580622,-0.584194) (-1.7287,-0.410793) ]
 [ (0.612628,-1.36454) (0.183707,-0.0820907) ]


 Cell (1,0)
 [ (0.961059,-1.04125) (0.759261,-0.580733) ]
 [ (-0.14398,0.778008) (-1.72331,0.775277) ]
 [ (-1.3533,1.23033) (0.766929,-0.253007) ]


 Cell (1,1)
 [ (-0.815133,0.185932) (0.798354,1.65059) ]
 [ (1.77056,0.611322) (1.05485,-1.55657) ]
 [ (-1.71069,0.500273) (-0.460123,1.38648) ]


.. code-block:: python

 >>> adims=A.get_adims()
 >>> print(adims)
 (2,2)
 >>> print(A.type())
 (2,2)


=====================
Access and arithmetic
=====================

.. code-block:: python

 >>> A=gelib.SO3partArr.gaussian([2,2],2,2)
 >>> B=gelib.SO3partArr.gaussian([2,2],2,2)
 >>> C=A+3.0*B


.. code-block:: python

 >>> a=A.get_cell([0,1])
 >>> print(a)
 Part l=0:
   [ (-1.50279,0.0436305) (0.570759,-1.11315) ]
 
 Part l=1:
   [ (0.208035,0.584081) (-1.56208,0.93446) ]
   [ (-0.580622,-0.584194) (-1.7287,-0.410793) ]
   [ (0.612628,-1.36454) (0.183707,-0.0820907) ]

 
.. code-block:: python

 >>> v=gelib.SO3vec.ones([2,2])
 >>> A[0,1]=v
 >>> print(A)
 Cell (0,0)
 [ (-1.23974,-0.653697) (-0.407472,-0.645572) ]


 Cell (0,1)
 [ (1,0) (1,0) ]


 Cell (1,0)
 [ (-1.13769,0.682072) (-1.22027,-0.711608) ]


 Cell (1,1)
 [ (-1.20183,0.967431) (-0.399454,-0.438438) ]



 Cell (0,0)
 [ (-0.056168,0.275777) (0.806889,0.904426) ]
 [ (-0.219183,-0.0361725) (0.89997,-0.709382) ]
 [ (0.842292,-0.53226) (-1.56131,-0.502227) ]


 Cell (0,1)
 [ (1,0) (1,0) ]
 [ (1,0) (1,0) ]
 [ (1,0) (1,0) ]


 Cell (1,0)
 [ (0.961059,-1.04125) (0.759261,-0.580733) ]
 [ (-0.14398,0.778008) (-1.72331,0.775277) ]
 [ (-1.3533,1.23033) (0.766929,-0.253007) ]


 Cell (1,1)
 [ (-0.815133,0.185932) (0.798354,1.65059) ]
 [ (1.77056,0.611322) (1.05485,-1.55657) ]
 [ (-1.71069,0.500273) (-0.460123,1.38648) ]

.. code-block:: python

 >>> B=gelib.SO3partArr.ones([2,2],1,2)
 >>> V.set_part(1,B)


=======================
Clebsch-Gordan products
=======================


.. code-block:: python

 >>> U=gelib.SO3vecArr.gaussian([2],[1,1])
 >>> V=gelib.SO3vecArr.gaussian([2],[1,1])
 >>> W=gelib.CGproduct(U,V)
 >>> print(W)
 Cell (0)
 [ (-2.53487,-2.85716) (-0.842041,0.952523) ]


 Cell (1)
 [ (1.23612,0.973937) (-1.97727,3.92508) ]



 Cell (0)
 [ (1.48004,1.58554) (-1.34735,2.85829) (-0.699849,0.153202) ]
 [ (-0.486202,1.5264) (-0.575991,-0.1719) (1.31258,-3.03451) ]
 [ (-2.66264,-3.27904) (-0.45774,2.09977) (1.04869,-0.0477999) ]


 Cell (1)
 [ (1.41485,-1.10451) (0.168792,0.217207) (2.42314,1.24571) ]
 [ (-1.62579,-3.80459) (-0.200385,3.03817) (0.562456,0.123351) ]
 [ (0.099497,-0.421702) (0.0822673,0.729146) (-0.0375059,-1.04887) ]



 Cell (0)
 [ (0.723803,-1.64195) ]
 [ (1.16576,-0.0268992) ]
 [ (-0.520009,0.972953) ]
 [ (0.160464,-0.355712) ]
 [ (-0.607096,2.29778) ]


 Cell (1)
 [ (0.286484,-0.127928) ]
 [ (2.2592,0.236154) ]
 [ (3.85525,-5.50227) ]
 [ (1.06791,-1.4773) ]
 [ (0.172447,-0.105246) ]


==============
GPU operations
==============

``SO3vecArr`` objects can be moved to/from the GPU the same way as ``SO3part`` and ``SO3vec`` objects. 
Similarly to ``SO3partArr``, operations on ``SO3vecArr`` objects are parallelized across cells. 

